#!/usr/bin/python
# -*- coding: utf-8 -*-
import sqlite3
import json
import time
import logging
from casino_config import bot, admin_1, admin_2, fake_number, cashier
from casino_config import get_status, get_balance, get_referals, get_ref_balance, get_ref_link, get_inf_profil
from casino_keyboard import markup_inline_soglashenie, keyboard_osnova, \
    keyboard_admin, keyboard_worker, keyboard_vivod, keyboard_balance_top_up_amount_2, \
    keyboard_balance_top_up_amount, nazad_admin, nazad_worker
from casino_money import vivod_money_1, worker_zp, _set_bill_id, \
    _create_invoice, _top_up_balance, _reset_bill_id, _get_user_balance, \
    _get_user_bill_id
from casino_functions import admin_rassilka, chan_balance, chan_status, ins_workers, del_workers
from casino_casino import play_casino

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–≤—ã–π —Å—Ç–∞—Ä—Ç + –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@bot.message_handler(commands=['start'])
def send_welcome(message):
    con = sqlite3.connect("dannie_2.db")
    cur = con.cursor()
    cur.execute(f"select count(*) from users where id = {message.chat.id}")
    if cur.fetchone()[0] == 0:
        con.commit()
        bot.send_message(message.from_user.id,
                         f"üéâ–ü—Ä–∏–≤–µ—Ç, {message.chat.first_name}!\n\n"
                         f"–ü–æ–ª–∏—Ç–∏–∫–∞ –∏ —É—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º.\n"
                         f"1. –ò–≥—Ä–∞—è —É –Ω–∞—Å, –≤—ã –±–µ—Ä—ë—Ç–µ –≤—Å–µ —Ä–∏—Å–∫–∏ –∑–∞ —Å–≤–æ–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ —Å–µ–±—è.\n"
                         f"2. –ü—Ä–∏–Ω–∏–º–∞—è –ø—Ä–∞–≤–∏–ª–∞, –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ—ë —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏–µ!\n"
                         f"3. –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–∞–Ω–µ–Ω –≤ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–∏ –Ω–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ/–æ–±–º–∞–Ω –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã!\n"
                         f"4. –ú—É–ª—å—Ç–∏–∞–∫–∫–∞—É–Ω—Ç—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã!\n"
                         f"5. –°–∫—Ä–∏–ø—Ç—ã, —Å—Ö–µ–º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ!\n"
                         f"6. –ï—Å–ª–∏ –±—É–¥—É—Ç –≤—ã—è–≤–ª–µ–Ω—ã –≤—ã—à–µ–ø–µ—Ä—á–∏—Å–ª–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏, –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω –¥–æ –≤—ã—è—Å–Ω–µ–Ω–∏—è –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤!\n"
                         f"7. –í —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –í–∞—Å –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –í–∞—à—É –ª–∏—á–Ω–æ—Å—Ç—å –∏ –í–∞—à–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏–µ.\n"
                         f"MoneyBot\n"
                         f"–í—ã –∏–≥—Ä–∞–µ—Ç–µ –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã, –ø–æ–∫—É–ø–∞—è –∏—Ö –∑–∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ –¥–µ–Ω—å–≥–∏. –õ—é–±–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–æ—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ–º!  –í—ã–≤–æ–¥ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞, –≤ 5 —Ä–∞–∑ –ø—Ä–µ–≤—ã—à–∞—é—â–µ–≥–æ —Å —Å—É–º–º—É –í–∞—à–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è!–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –í—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –∞ —Ç–∞–∫ –∂–µ –≤–æ–ø—Ä–æ—Å–∞–º –∏–≥—Ä–∞–º –æ–±–æ–≥–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, —É–∫–∞–∑–∞–Ω–Ω—É—é –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫ –±–æ—Ç—É. –ü–∏—à–∏—Ç–µ —Å—Ä–∞–∑—É –ø–æ –¥–µ–ª—É, –∞ –Ω–µ ¬´–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –¢—É—Ç?¬ª\n"
                         f"–°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –∏–∑–ª–æ–∂–∏—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏ —á–µ—Ç–∫–æ –∏ —è—Å–Ω–æ, —á—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ –º—É—á–∞–ª–∞—Å—å –∏ –Ω–µ –ø—ã—Ç–∞–ª–∞—Å—å –í–∞—Å –ø–æ–Ω—è—Ç—å.\n"
                         f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!\n"
                         f"–£–¥–∞—á–∏ –≤ –∏–≥—Ä–µ.\n"
                         f"–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - —É–≥–∞–¥–∞—Ç—å, –≤ –∫–∞–∫–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –±—É–¥–µ—Ç —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è –≤—ã–ø–∞–¥—à–µ–µ —á–∏—Å–ª–æ. \n"
                         f"–û—Ç 0 –¥–æ 50, –ª–∏–±–æ –æ—Ç 50 –¥–æ 100, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–¥–æ–≤–µ–Ω–∏–µ —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏, –ª–∏–±–æ –∂–µ –µ—Å–ª–∏ –í–∞—à–µ —á–∏—Å–ª–æ –±—É–¥–µ—Ç —Ä–∞–≤–Ω–æ 50, —Ç–æ —Ç–æ–≥–¥–∞ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –≤—ã–∏–≥—Ä—ã—à —Ä–∞–≤–Ω—ã–π 10 –í–∞—à–∏–º —Å—Ç–∞–≤–∫–∞–º. –ù–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –Ω–∞–º–Ω–æ–≥–æ –Ω–∏–∂–µ.\n\n"
                         f"–£–¥–∞—á–∏!",
                         reply_markup=markup_inline_soglashenie)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–æ—Å—Å–∞
        ref = message.text
        if len(ref) != 6:
            try:
                ref = int(ref[7:])
                con = sqlite3.connect("dannie_2.db")
                cur = con.cursor()
                cur.execute(f"select count(*) from users where id = {ref}")
                if cur.fetchone()[0] != 0:
                    con.commit()
                    boss = ref
                else:
                    con.commit()
                    boss = admin_1
            except:
                boss = admin_1
        else:
            boss = admin_1

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞–Ω–Ω—ã–µ
        id = message.chat.id
        name = (f"{message.chat.first_name} {'|'} {message.chat.last_name}")
        status = 0
        balance = 0
        last_popolnenie = 0
        referals = 0
        ref_balance = 0
        con = sqlite3.connect("dannie_2.db")
        cur = con.cursor()
        cur.execute(f"INSERT INTO users (id,name,status,balance,last_popolnenie,referals,ref_balance,boss) "
                    f"VALUES ({id},\"{name}\",{status},{balance},{last_popolnenie},{referals},{ref_balance},{boss})")
        con.commit()

        # –î–æ–±–∞–≤–ª—è–µ–º –±–æ—Å—Å—É + 1 —Ä–µ—Ñ–µ—Ä–∞–ª
        con = sqlite3.connect("dannie_2.db")
        cur = con.cursor()
        cur.execute(f"SELECT referals FROM users WHERE id = {boss}")
        referal = cur.fetchone()[0]
        referals = referal + 1
        con.commit()
        con = sqlite3.connect("dannie_2.db")
        cur = con.cursor()
        cur.execute(f"UPDATE users SET referals = {referals} WHERE id = {boss}")
        con.commit()


    else:
        con.commit()
        balance = get_balance(message)
        referals = get_referals(message)
        ref_balance = get_ref_balance(message)
        ref_link = get_ref_link(message)
        inf_profil = get_inf_profil(balance, referals, ref_balance, ref_link)
        bot.send_message(message.from_user.id, f"üéâ–ü—Ä–∏–≤–µ—Ç, {message.chat.first_name}üéâ! \n\n\n{inf_profil}",
                         reply_markup=keyboard_osnova())


# –û—Ç–≤–µ—Ç—ã
@bot.callback_query_handler(func=lambda call: True)
def answer(call):
    if call.data == "soglashenie":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        balance = get_balance(call.message)
        referals = get_referals(call.message)
        ref_balance = get_ref_balance(call.message)
        ref_link = get_ref_link(call.message)
        inf_profil = get_inf_profil(balance, referals, ref_balance, ref_link)
        bot.send_message(call.message.chat.id, f"{inf_profil}", reply_markup=keyboard_osnova())

    try:
        callback = json.loads(call.data or "")
        if callback.get("amount"):
            user_id = call.message.chat.id
            pay_url, bill_id = _create_invoice(int(callback.get("amount")))
            _set_bill_id(user_id, bill_id)
            bot.send_message(call.message.chat.id, f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –ø–æ —Å—Å—ã–ª–∫–µ:\n{pay_url}",
                             reply_markup=keyboard_balance_top_up_amount_2())
    except:
        pass


# –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞
@bot.message_handler(content_types="text")
def get_text_message(message):
    con = sqlite3.connect("dannie_2.db")
    cur = con.cursor()
    balance = get_balance(message)
    referals = get_referals(message)
    ref_balance = get_ref_balance(message)
    ref_link = get_ref_link(message)
    inf_profil = get_inf_profil(balance, referals, ref_balance, ref_link)
    cur.execute(f"select count(*) from workers where id = {message.chat.id}")

    if message.text == "–ò–≥—Ä–∞—Ç—å":
        bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
        bot.register_next_step_handler(message, play_casino)

    elif message.text == "–ü–æ–ø–æ–ª–Ω–∏—Ç—å":

        bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è",

                         reply_markup=keyboard_balance_top_up_amount())

    elif message.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É":
        user_id = message.chat.id
        bill_id = _get_user_bill_id(message.from_user.id)
        if bill_id is None:
            bot.send_message(user_id, "–í—ã –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ –æ–ø–ª–∞—Ç—É!")
            return

        bill_status = cashier.check_bill(bill_id)
        if bill_status.is_paid:
            money = bill_status.amount.value
            cur.execute(f"UPDATE users SET status = {1} WHERE id = {user_id}")
            con.commit()
            cur.execute(f"UPDATE users SET last_popolnenie = {money} WHERE id = {user_id}")
            con.commit()
            con.close()
            _top_up_balance(user_id, bill_status.amount.value)
            bot.send_message(admin_1, f"–ù–∞ –í–∞—à –ö–∏–≤–∏ –ö–æ—à–µ–ª—ë–∫ –ø–æ—Å—Ç—É–ø–∏–ª–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!")
            bot.send_message(admin_2, f"–ù–∞ –í–∞—à –ö–∏–≤–∏ –ö–æ—à–µ–ª—ë–∫ –ø–æ—Å—Ç—É–ø–∏–ª–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!")
            bot.send_message(user_id,
                             f"–í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–µ–Ω –∏ —Å–æ—Å—Ç–∞–ª—è–µ—Ç: "
                             f"{_get_user_balance(user_id)}")
            _reset_bill_id(message.chat.id)

        else:
            bot.send_message(user_id, "–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á—ë—Ç!‚ùå")

    elif message.text == "–í—ã–≤–µ—Å—Ç–∏":
        bot.send_message(message.from_user.id, f"{inf_profil}")
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞", reply_markup=keyboard_vivod())
        bot.register_next_step_handler(message, vivod_money_1)

    elif message.text == "–ê–¥–º–∏–Ω" and message.chat.id == admin_1 or message.chat.id == admin_2:
        bot.send_message(message.from_user.id, "–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", reply_markup=keyboard_admin())
        bot.register_next_step_handler(message, get_text_message_admin)

    elif message.text == "–í–æ—Ä–∫–µ—Ä" and cur.fetchone()[0] != 0:
        bot.send_message(message.from_user.id, "–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é –≤–æ—Ä–∫–µ—Ä–∞", reply_markup=keyboard_worker())
        bot.register_next_step_handler(message, get_text_message_worker)

    elif message.text == "–ù–∞–∑–∞–¥":
        bot.send_message(message.from_user.id, "üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard_osnova())


# –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∞
@bot.message_handler(content_types="text")
def get_text_message_admin(message):
    con = sqlite3.connect("dannie_2.db")
    cur = con.cursor()
    if message.text == "–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É":
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
        bot.register_next_step_handler(message, admin_rassilka)

    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å":
        cur.execute("SELECT id, name, balance FROM users")
        id = cur.fetchall()
        for id in id:
            bot.send_message(message.from_user.id, f"{id}")
            time.sleep(1)
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ id —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                         reply_markup=nazad_admin())
        bot.register_next_step_handler(message, chan_balance)

    elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å":
        cur.execute("SELECT id, name, status FROM users")
        id = cur.fetchall()
        for id in id:
            bot.send_message(message.from_user.id, f"{id}")
            time.sleep(1)
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ id —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                         reply_markup=nazad_admin())
        bot.register_next_step_handler(message, chan_status)

    elif message.text == "–î–æ–±–∞–≤–∏—Ç—å –≤–æ—Ä–∫–µ—Ä–∞":
        cur.execute("SELECT id, name FROM users")
        id = cur.fetchall()
        for id in id:
            bot.send_message(message.from_user.id, f"{id}")
            time.sleep(1)
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ id —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤–æ—Ä–∫–µ—Ä–æ–º",
                         reply_markup=nazad_admin())
        bot.register_next_step_handler(message, ins_workers)

    elif message.text == "–£–¥–∞–ª–∏—Ç—å –≤–æ—Ä–∫–µ—Ä–∞":
        cur.execute("SELECT id FROM workers")
        id = cur.fetchall()
        for id in id:
            bot.send_message(message.from_user.id, f"{id}")
            time.sleep(1)
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ id —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –≤–æ—Ä–∫–µ—Ä–æ–≤",
                         reply_markup=nazad_admin())
        bot.register_next_step_handler(message, del_workers)

    elif message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        cur.execute("SELECT COUNT(1) FROM users")
        users = cur.fetchone()
        cur.execute("SELECT COUNT(1) FROM workers")
        workers = cur.fetchone()
        bot.send_message(message.from_user.id, f"–ß–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users[0]}\n"
                                               f"–ß–∏—Å–ª–æ –≤–æ—Ä–∫–µ—Ä–æ–≤: {workers[0]}\n"
                                               f"–§–µ–π–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä: {fake_number}")
        bot.register_next_step_handler(message, get_text_message_admin)

    elif message.text == "–í—ã–π—Ç–∏":
        bot.send_message(message.from_user.id, "–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", reply_markup=keyboard_osnova())


# –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–æ—Ä–∫–µ—Ä–∞
@bot.message_handler(content_types="text")
def get_text_message_worker(message):
    con = sqlite3.connect("dannie_2.db")
    cur = con.cursor()
    balance = get_balance(message)
    referals = get_referals(message)
    ref_balance = get_ref_balance(message)
    ref_link = get_ref_link(message)
    inf_profil = get_inf_profil(balance, referals, ref_balance, ref_link)

    if message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å":
        cur.execute("SELECT id, name, balance FROM users")
        id = cur.fetchall()
        for id in id:
            bot.send_message(message.from_user.id, f"{id}")
            time.sleep(1)
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ id —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä–æ–º—É –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                         reply_markup=nazad_worker())
        bot.register_next_step_handler(message, chan_balance)

    elif message.text == "–í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞":
        bot.send_message(message.from_user.id, f"{inf_profil}")
        bot.send_message(message.from_user.id,
                         "üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ üíµ \n\n‚ùó–í—ã–≤–æ–¥—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ—Ç 500 —Ä—É–±–ª–µ–π‚ùó")
        bot.register_next_step_handler(message, worker_zp)

    elif message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        bot.send_message(message.from_user.id, f"–§–µ–π–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä: {fake_number}\n\n"
                                               f"–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º: [–°–°–´–õ–ö–ê](https://tgraph.io/Kak-polzovatsya-botom-08-03)\n\n"
                                               f"–ú–∞–Ω—É–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã: [–°–°–´–õ–ö–ê](https://tgraph.io/Manual-dlya-raboty-08-03)\n\n"
                                               f"–°–∫—Ä–∏–Ω—ã –¥–ª—è —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: –°–°–´–õ–ö–ê", parse_mode='Markdown')
        bot.register_next_step_handler(message, get_text_message_worker)

    elif message.text == "–í—ã–π—Ç–∏":
        bot.send_message(message.from_user.id, "–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –º–µ–Ω—é –≤–æ—Ä–∫–µ—Ä–∞", reply_markup=keyboard_osnova())


if __name__ == '__main__':
    bot.polling(none_stop=True)
